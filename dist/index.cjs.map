{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["// used when storing in localStorage\r\nexport const KEY = \"streak\";\r\n\r\nexport function formattedDate(date: Date): string {\r\n  // returns date a 11/11/2021\r\n  // other times 11/11/2021, 12:00:00 AM\r\n  return date.toLocaleDateString(\"en-US\");\r\n}\r\n\r\nexport interface Streak {\r\n  currentCount: number;\r\n  startDate: string;\r\n  lastLoginDate: string;\r\n}\r\n\r\nexport function buildStreak(\r\n  date: Date,\r\n  overrideDefaults?: Partial<Streak>\r\n): Streak {\r\n  const defaultStreak = {\r\n    currentCount: 1,\r\n    startDate: formattedDate(date),\r\n    lastLoginDate: formattedDate(date),\r\n  };\r\n\r\n  return {\r\n    ...defaultStreak,\r\n    ...overrideDefaults,\r\n  };\r\n}\r\n\r\nexport function updateStreak(storage: Storage, streak: Streak): void {\r\n  storage.setItem(KEY, JSON.stringify(streak));\r\n}\r\n","import {\r\n  formattedDate,\r\n  Streak,\r\n  buildStreak,\r\n  updateStreak,\r\n  KEY,\r\n} from \"../src/utils\";\r\n\r\nfunction differenceInDays(dateLeft: Date, dateRight: Date): number {\r\n  const diffTime = Math.abs(dateLeft.getTime() - dateRight.getTime());\r\n  const differenceInDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  return differenceInDays;\r\n}\r\n\r\nfunction shouldIncrementOrResetStreakCount(\r\n  currentDate: Date,\r\n  lastLoginDate: string\r\n): \"increment\" | \"reset\" | \"none\" {\r\n  // we get 11/5/2021\r\n  // so to get 5, we split on / and get the second item\r\n  const difference =\r\n    currentDate.getDate() - parseInt(lastLoginDate.split(\"/\")[1]);\r\n\r\n  // Same-day login, do nothing\r\n  if (difference === 0) {\r\n    return \"none\";\r\n  }\r\n\r\n  // This means they logged in the day after the currentDate\r\n  if (difference === 1) {\r\n    return \"increment\";\r\n  }\r\n\r\n  // otherwise they logged in after a day, which would break the streak\r\n  return \"reset\";\r\n}\r\n\r\nexport function streakCounter(storage: Storage, date: Date): Streak {\r\n  // get current streak from localstorage\r\n  const streakInLocalStorage = storage.getItem(KEY);\r\n\r\n  if (streakInLocalStorage) {\r\n    try {\r\n      const streak = JSON.parse(streakInLocalStorage) as Streak;\r\n      const state = shouldIncrementOrResetStreakCount(\r\n        date,\r\n        streak.lastLoginDate\r\n      );\r\n      const SHOULD_INCREMENT = state === \"increment\";\r\n      const SHOULD_RESET = state === \"reset\";\r\n\r\n      if (SHOULD_INCREMENT) {\r\n        const updatedStreak = buildStreak(date, {\r\n          startDate: streak.startDate,\r\n          currentCount: streak.currentCount + 1,\r\n          lastLoginDate: formattedDate(date),\r\n        });\r\n\r\n        // store in localStorage\r\n        updateStreak(storage, updatedStreak);\r\n\r\n        return updatedStreak;\r\n      }\r\n\r\n      if (SHOULD_RESET) {\r\n        const updatedStreak = buildStreak(date);\r\n\r\n        // store in localStorage\r\n        updateStreak(storage, updatedStreak);\r\n\r\n        return updatedStreak;\r\n      }\r\n      return streak;\r\n    } catch (error) {\r\n      console.error(\"Failed to parse streak from localStorage\");\r\n    }\r\n  }\r\n  const streak = buildStreak(date);\r\n  // store in localStorage\r\n  updateStreak(storage, streak);\r\n\r\n  return streak;\r\n}\r\n"],"names":["KEY","formattedDate","date","toLocaleDateString","buildStreak","overrideDefaults","_extends","currentCount","startDate","lastLoginDate","updateStreak","storage","streak","setItem","JSON","stringify","difference","streakInLocalStorage","getItem","parse","state","getDate","parseInt","split","SHOULD_RESET","updatedStreak","error","console"],"mappings":"wOACaA,EAAM,SAEH,SAAAC,EAAcC,GAG5B,OAAOA,EAAKC,mBAAmB,QACjC,CAQgB,SAAAC,EACdF,EACAG,GAQA,OAAAC,EAAA,CAAA,EANsB,CACpBC,aAAc,EACdC,UAAWP,EAAcC,GACzBO,cAAeR,EAAcC,IAK1BG,EAEP,CAEgB,SAAAK,EAAaC,EAAkBC,GAC7CD,EAAQE,QAAQb,EAAKc,KAAKC,UAAUH,GACtC,uBCKgB,SAAcD,EAAkBT,GAE9C,IAvBAO,EAIMO,EAmBAC,EAAuBN,EAAQO,QAAQlB,GAE7C,GAAIiB,EACF,IACE,IAAML,EAASE,KAAKK,MAAMF,GACpBG,GA5BVX,EA8BMG,EAAOH,cAtBM,IAJbO,EAyBAd,EAxBQmB,UAAYC,SAASb,EAAcc,MAAM,KAAK,KAInD,OAIU,IAAfP,EACK,YAIF,SAeGQ,EAAyB,UAAVJ,EAErB,GAHmC,cAAVA,EAGH,CACpB,IAAMK,EAAgBrB,EAAYF,EAAM,CACtCM,UAAWI,EAAOJ,UAClBD,aAAcK,EAAOL,aAAe,EACpCE,cAAeR,EAAcC,KAM/B,OAFAQ,EAAaC,EAASc,GAEfA,CACR,CAED,GAAID,EAAc,CAChB,IAAMC,EAAgBrB,EAAYF,GAKlC,OAFAQ,EAAaC,EAASc,GAEfA,CACR,CACD,OAAOb,CACR,CAAC,MAAOc,GACPC,QAAQD,MAAM,2CACf,CAEH,IAAMd,EAASR,EAAYF,GAI3B,OAFAQ,EAAaC,EAASC,GAEfA,CACT"}